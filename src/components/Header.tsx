
import React, { useState } from 'react';
import { Plus, Menu, Share, Trash, ChevronDown, Info, RotateCcw } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { AppSettings } from '../types/note';
import { toast } from '@/hooks/use-toast';

interface HeaderProps {
  onCreateNote: () => void;
  onCreateList: () => void;
  settings: AppSettings;
  onSettingsChange: (settings: Partial<AppSettings>) => void;
  onImportNotes: (file: File) => void;
  onExportAllNotes: () => void;
  selectedCount?: number;
  onExportSelected?: () => void;
  onDeleteSelected?: () => void;
}

const Header: React.FC<HeaderProps> = ({ 
  onCreateNote,
  onCreateList,
  settings, 
  onSettingsChange, 
  onImportNotes,
  onExportAllNotes,
  selectedCount = 0,
  onExportSelected,
  onDeleteSelected
}) => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isCreateMenuOpen, setIsCreateMenuOpen] = useState(false);
  const [showInfo, setShowInfo] = useState(false);
  const [showUpdateDialog, setShowUpdateDialog] = useState(false);
  const [updateCode, setUpdateCode] = useState('');

  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      onImportNotes(file);
      event.target.value = '';
    }
  };

  const handleForceUpdate = () => {
    if (updateCode === 'Nott_013') {
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.getRegistrations().then(registrations => {
          registrations.forEach(registration => {
            registration.unregister();
          });
          window.location.reload();
        });
      } else {
        window.location.reload();
      }
      toast({
        title: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        description: "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...",
      });
    } else {
      toast({
        title: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥",
        description: "–í–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞",
        variant: "destructive",
      });
    }
    setUpdateCode('');
    setShowUpdateDialog(false);
  };

  return (
    <header className="sticky top-0 z-50 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 border-b">
      <div className="flex items-center justify-between p-4">
        <div className="flex items-center gap-2">
          <DropdownMenu open={isMenuOpen} onOpenChange={setIsMenuOpen}>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="relative">
                <Menu size={16} />
                {selectedCount > 0 && (
                  <span className="absolute -top-2 -right-2 bg-primary text-primary-foreground text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {selectedCount}
                  </span>
                )}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="w-56 bg-popover">
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                  <Plus size={16} className="mr-2" />
                  –°–æ–∑–¥–∞—Ç—å
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuItem onClick={onCreateNote}>
                    üìù –ó–∞–º–µ—Ç–∫—É
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={onCreateList}>
                    üìã –°–ø–∏—Å–æ–∫
                  </DropdownMenuItem>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                  üî§ –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ globalFontSize: 'small' })}
                    className={settings.globalFontSize === 'small' ? 'bg-accent' : ''}
                  >
                    –ú–∞–ª–µ–Ω—å–∫–∏–π
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ globalFontSize: 'medium' })}
                    className={settings.globalFontSize === 'medium' ? 'bg-accent' : ''}
                  >
                    –°—Ä–µ–¥–Ω–∏–π
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ globalFontSize: 'large' })}
                    className={settings.globalFontSize === 'large' ? 'bg-accent' : ''}
                  >
                    –ë–æ–ª—å—à–æ–π
                  </DropdownMenuItem>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
              
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                  {settings.theme === 'light' ? '‚òÄÔ∏è' : 'üåô'} –¢–µ–º–∞
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ theme: 'light' })}
                    className={settings.theme === 'light' ? 'bg-accent' : ''}
                  >
                    ‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ theme: 'dark' })}
                    className={settings.theme === 'dark' ? 'bg-accent' : ''}
                  >
                    üåô –¢—ë–º–Ω–∞—è
                  </DropdownMenuItem>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
              
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>
                  üìä –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
                </DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ sortBy: 'date' })}
                    className={settings.sortBy === 'date' ? 'bg-accent' : ''}
                  >
                    –ü–æ –¥–∞—Ç–µ
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ sortBy: 'title' })}
                    className={settings.sortBy === 'title' ? 'bg-accent' : ''}
                  >
                    –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={() => onSettingsChange({ sortBy: 'tags' })}
                    className={settings.sortBy === 'tags' ? 'bg-accent' : ''}
                  >
                    –ü–æ —Ç–µ–≥–∞–º
                  </DropdownMenuItem>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuItem onClick={onExportAllNotes}>
                üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
              </DropdownMenuItem>
              
              <DropdownMenuItem asChild>
                <label className="cursor-pointer">
                  üì• –ò–º–ø–æ—Ä—Ç –∑–∞–º–µ—Ç–æ–∫
                  <input
                    type="file"
                    accept=".json"
                    onChange={handleFileImport}
                    className="hidden"
                  />
                </label>
              </DropdownMenuItem>
              
              {selectedCount > 0 && (
                <>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={onExportSelected} className="text-primary">
                    <Share size={16} className="mr-2" />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedCount})
                  </DropdownMenuItem>
                  <DropdownMenuItem onClick={onDeleteSelected} className="text-destructive">
                    <Trash size={16} className="mr-2" />
                    –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedCount})
                  </DropdownMenuItem>
                </>
              )}
              
              <DropdownMenuSeparator />
              
              <DropdownMenuItem onClick={() => setShowUpdateDialog(true)}>
                <RotateCcw size={16} className="mr-2" />
                üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
              </DropdownMenuItem>
              
              <DropdownMenuItem onClick={() => setShowInfo(true)}>
                <Info size={16} className="mr-2" />
                ‚ÑπÔ∏è Info
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>

        <h1 className="text-xl font-bold text-foreground">üìù –ó–∞–º–µ—Ç–∫–∏</h1>
        
        <div className="flex items-center gap-2">
          <DropdownMenu open={isCreateMenuOpen} onOpenChange={setIsCreateMenuOpen}>
            <DropdownMenuTrigger asChild>
              <Button size="sm" className="gap-2">
                <Plus size={16} />
                <span className="hidden sm:inline">–°–æ–∑–¥–∞—Ç—å</span>
                <ChevronDown size={14} />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="bg-popover">
              <DropdownMenuItem onClick={onCreateNote}>
                üìù –ó–∞–º–µ—Ç–∫—É
              </DropdownMenuItem>
              <DropdownMenuItem onClick={onCreateList}>
                üìã –°–ø–∏—Å–æ–∫
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      
      {/* Info Dialog */}
      <Dialog open={showInfo} onOpenChange={setShowInfo}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</h3>
              <p className="text-sm">React, TypeScript, Tailwind CSS, Vite, Shadcn/ui</p>
            </div>
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
              <p className="text-sm">TypeScript, JavaScript, HTML, CSS</p>
            </div>
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</h3>
              <p className="text-sm">Lucide Icons, Radix UI, LocalStorage API</p>
            </div>
            <div>
              <h3 className="font-semibold text-sm text-muted-foreground">–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</h3>
              <p className="text-sm font-medium">Nott_013</p>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* Update Dialog */}
      <Dialog open={showUpdateDialog} onOpenChange={setShowUpdateDialog}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p className="text-sm text-muted-foreground">
              –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:
            </p>
            <Input
              type="password"
              value={updateCode}
              onChange={(e) => setUpdateCode(e.target.value)}
              placeholder="–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞"
              onKeyPress={(e) => e.key === 'Enter' && handleForceUpdate()}
            />
            <div className="flex gap-2">
              <Button onClick={handleForceUpdate} className="flex-1">
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
              <Button 
                variant="outline" 
                onClick={() => {
                  setShowUpdateDialog(false);
                  setUpdateCode('');
                }}
                className="flex-1"
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </header>
  );
};

export default Header;
